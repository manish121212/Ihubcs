/**
 * *****************************************************************************
 * Copyright (c) 2008-2015 LogiCoy, Inc. All rights reserved. This program and
 * the accompanying materials are made available under the terms of LogiCoy
 * License v1.0 which accompanies this distribution, and is available at
 * https://www.logicoy.com
 *
 * Contributors: LogiCoy, Inc. - initial API and implementation
 * ****************************************************************************
 */
/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend:src/main/java/project/security/AccountDetailsServiceImpl-spring3.p.vm.java
 */
package com.logicoy.bpelmon.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

/**
 * Spring Security Class
 *
 * @author Paramjeet Singh
 */
// @Component
// @Configuration
// @EnableWebSecurity
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

	@Bean
	public PasswordEncoder passwordEncoder() {
		PasswordEncoder encoder = new BCryptPasswordEncoder();
		return encoder;
	}

	@Autowired
	@Qualifier("authenticationProvider")
	AuthenticationProvider authenticationProvider;

	/**
	 * Configure the Custom Authenticator and Password Encoder Scheme
	 *
	 * @param auth
	 * @throws Exception
	 */
	@Autowired
	public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
		DaoAuthenticationProvider provider = (DaoAuthenticationProvider) authenticationProvider;
		provider.setPasswordEncoder(passwordEncoder());
		auth.authenticationProvider(provider);
	}

	/**
	 * Define the urls and their security requirement
	 *
	 * @param http
	 * @throws Exception
	 */
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.authorizeRequests()
				// .antMatchers("/sendPushNotification*","/registerDeviceToken","/registerDeviceToken**","/locationError","/errorPage","/screenShotAlert","/screenShotAlert/*","/screenShotAlert/**","/requestModule","/requestModule/*","/requestModule/**","/home",
				// "/styles/*", "/scripts/*","/css/**",
				// "/img/**","/image/**","/vendor/**","/fonts/**","/images/**", "/js/**",
				// "/forgotPassword",
				// "/bootstrap/**", "/bootstrap/*/*", "/bootstrap/*/**",
				// "/angular/modules/registration/*",
				// "/plugins/**", "/plugins/*/*", "/plugins/*/**",
				// "/PasswordService/*,/PasswordService/*/**",
				// "/PasswordService/**", "/registeruser", "/register", "/home_1", "/widgets",
				// "/forgotPassword/**","/forgotPassword/*","/isValidToken/*","/isValidToken*","/isValidToken/**",
				// "/angular/modules/login/login.js","/RegistrationSuccessful","/getUserRoles","/registerdelegateuser","/messageunreadcount*","/sendmessage*","/resetPassword*",
				// "/fetchmessageconversation*","/messageunreadcount","/sendmessage",
				// "/previewProcedure","/previewProcedure/*","/previewProcedure/**",
				// "/resetPassword",
				// "/fetchmessageconversation","/forgotPassword","/forgotPassword*","/").permitAll()
				// .antMatchers("/api","/styles/*", "/scripts/*","/css/**",
				// "/img/**","/image/**","/vendor/**","/fonts/**","/images/**",
				// "/js/**","/bootstrap/**", "/bootstrap/*/*", "/bootstrap/*/**","/plugins/**",
				// "/plugins/*/*", "/plugins/*/**").permitAll()
				// .anyRequest().authenticated()
				.and().formLogin().loginPage("/login").permitAll().and().logout()
				.addLogoutHandler(customLogoutHandler()).permitAll();

		/* http.csrf().csrfTokenRepository(new CookieCsrfTokenRepository()); */
		http.csrf().disable();
	}

	@Bean
	public CustomLogoutHandler customLogoutHandler() {
		return new CustomLogoutHandler();
	}

	public WebSecurityConfig() {

	}

	/*
	 * @Autowired public void configureGlobal(AuthenticationManagerBuilder auth)
	 * throws Exception { /* auth .inMemoryAuthentication()
	 * .withUser("user").password("password").roles("USER");
	 * 
	 * 
	 * auth.jdbcAuthentication().dataSource(jdbcTemplate.getDataSource())
	 * .usersByUsernameQuery(
	 * "select email,password, isEnabled from pdmp_user where email=?")
	 * .authoritiesByUsernameQuery(
	 * "select b.email as email, c.name from pdmp_map_user_role a ,pdmp_user b, pdmp_role c "
	 * + " where a.user_id=b.id and a.role_id=c.id and b.email=?");
	 * 
	 * }
	 */
}
